{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdca5b4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "from PyPDF2 import PdfReader\n",
    "from langchain.text_splitter import CharacterTextSplitter\n",
    "from langchain.vectorstores import Chroma\n",
    "from langchain.chains.react import ReAct\n",
    "from langchain.embeddings import SBERTEmbeddings\n",
    "from langchain.llms import GPT4All\n",
    "from langchain.util import langchain_to_streamlit\n",
    "\n",
    "# Global variable for memory\n",
    "memory = []\n",
    "\n",
    "def main():\n",
    "    # Streamlit page configuration\n",
    "    st.set_page_config(page_title=\"CHATBOT for legal queries related to divorce and inheritance\", page_icon=':books:')\n",
    "    st.header(\"CHATBOT for legal queries related to divorce and inheritance :books:\")\n",
    "\n",
    "    # Upload PDF documents\n",
    "    pdf = st.file_uploader(\"Upload your documents\", type=\"pdf\", accept_multiple_files=True)\n",
    "\n",
    "    # Extract text from uploaded PDFs\n",
    "    texts = []\n",
    "    if pdf is not None:\n",
    "        for pdf_file in pdf:\n",
    "            pdf_reader = PdfReader(pdf_file)\n",
    "            text = \"\"\n",
    "            for page in pdf_reader.pages:\n",
    "                text += page.extract_text()\n",
    "            texts.append(text)\n",
    "\n",
    "    # Split text into chunks\n",
    "    chunks = []\n",
    "    for text in texts:\n",
    "        text_splitter = CharacterTextSplitter(separator=\"\\n\\n\", chunk_size=1000, chunk_overlap=200, length_function=len)\n",
    "        chunks.extend(text_splitter.split_text(text))\n",
    "\n",
    "    # Create embeddings using SBERT\n",
    "    embeddings = SBERTEmbeddings(model_name=\"paraphrase-multilingual-MiniLM-L12-v2\")\n",
    "\n",
    "    # Create context using Chroma from texts\n",
    "    context = Chroma.from_texts(chunks, embeddings)\n",
    "\n",
    "    # Ask user for input query\n",
    "    query = st.text_input(\"Ask a question about your documents:\")\n",
    "\n",
    "    # Process query and provide response\n",
    "    if query:\n",
    "        # Get relevant documents from context\n",
    "        docs = context.similarity_search(query)\n",
    "\n",
    "        # Initialize GPT4All language model\n",
    "        gpt = GPT4All()\n",
    "\n",
    "        # Initialize ReAct framework\n",
    "        react = ReAct(gpt)\n",
    "\n",
    "        # Generate response\n",
    "        response = react.answer_query(docs, query)\n",
    "\n",
    "        # Store the question and answer in memory\n",
    "        memory.append({\"question\": query, \"answer\": response})\n",
    "\n",
    "        # Display response\n",
    "        st.write(response)\n",
    "\n",
    "    # Memory section\n",
    "    if st.checkbox(\"Memory\"):\n",
    "        st.write(\"Memory Selected!\")\n",
    "        # Display the memory\n",
    "        if memory:\n",
    "            st.write(\"Previous Questions and Answers:\")\n",
    "            for i, entry in enumerate(memory, 1):\n",
    "                st.write(f\"Q{i}: {entry['question']}\")\n",
    "                st.write(f\"A{i}: {entry['answer']}\")\n",
    "        else:\n",
    "            st.write(\"No previous questions and answers in memory.\")\n",
    "\n",
    "    # Reset memory\n",
    "    if st.button(\"Clear Memory\"):\n",
    "        memory.clear()\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dacd09b6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
